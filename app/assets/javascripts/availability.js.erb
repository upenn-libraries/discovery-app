var globaldata = {};
var renderdata = {};
var validRequestTypes = ["CentralCAT","MAINT-EC","CHI CAT","CatMet","HEB CAT",
                         "Jap-KorCAT","MUSIC CAT","MidEastCat","SASIA CAT",
                         "SCPC CAT","SLAV CAT","BindRepair","MAINT-enh",
                         "MAINT-otf","MAINT-tr"];
$.fn.dataTable.ext.errMode = 'none';          

$(document).ready(function() {

    // subclass BlacklightAlma
    function Franklin() {
        BlacklightAlma.call(this);
    }

    // Hackily parses relevant context out of the DOM for the specified mmsid
    function get_request_context(mmsid) {
      var record_root = $('#doc_franklin_'+mmsid);
      if (record_root.length == 0) {
        record_root = $('#documents > div.document').has('div.documentHeader > h3.index_title a[href $= "_'+mmsid+'"]');
      }
      var avail_jq_node = record_root.find('.availability-ajax-loaded[data-availability-ids='+mmsid+']')
      var available = false;
      avail_jq_node.contents().each(function() {
        if (this.nodeType === 3 && $.trim(this.nodeValue).startsWith('Available')) {
          available = true;
          return false; // there's at least one "Available", so return early
        }
      });
      var full_text_links = record_root.find('dd.blacklight-full_text_links_for_cluster_display a');
      var hathi_pd = false;
      var hathi_etas = false;
      full_text_links.contents().each(function() {
        if (this.nodeType === 3) {
          var trimmed = $.trim(this.nodeValue);
          if (trimmed.startsWith('COVID-19')) {
            hathi_etas = true;
            return !hathi_pd; // if also pd, return early
          } else if (trimmed.endsWith('HathiTrust')) {
            hathi_pd = true;
            return !hath_etas; // if also etas, return early
          }
        }
      });
      var monograph = true; //TODO: determine whether this is actually a monograph?
      return {
        available: available,
        hathi_etas: hathi_etas,
        hathi_pd: hathi_pd,
        monograph: monograph
      };
    }

    // Based on hackily-parsed DOM context, determine whether the Pickup@Penn link should be suppressed
    function disable_pickup_at_penn(ctx) {
      return true;//ctx.monograph && (!ctx.available || ctx.hathi_etas || ctx.hathi_pd);
    }

    function constructAeonLink(mmsid, holding) {
        // TODO: remove this line once the libraries are open again
        return null;

        if(holding['link_to_aeon']) {
          return '<a href="/redir/aeon?bibid=' + mmsid + '&hldid=' + holding['holding_id'] + '" target="_blank">Request to view</a>';
        }

        return null;
    }

    Franklin.prototype = Object.create(BlacklightAlma.prototype);

    Franklin.prototype.formatHolding = function (mms_id, holding) {
        if (holding['inventory_type'] == 'physical') {
            var availability = "Unknown";
            if (holding['availability'] == 'check_holdings') {
                availability = "See options";
            } else if (holding['availability'] == 'unavailable') {
                availability = "See request options";
            } else if (holding['availability'] == 'available') {
                availability = "Available";
            }
            // TODO: pass in format to shelfLocatorLink() somehow
            return [availability, holding['location'], holding['call_number'], $.shelfLocatorLink(mms_id, holding, "TODO"), constructAeonLink(mms_id, holding)]
                .filter(function (item) {
                    return item != null && item.length > 0;
                }).join(". ");
        } else if(holding['inventory_type'] == 'electronic') {

            if (holding['activation_status'] == 'Available') {
                var url = null;
                if (holding['portfolio_pid']) {
                    url = "https://<%= ENV['ALMA_DELIVERY_DOMAIN'] %>/view/uresolver/<%= ENV['ALMA_INSTITUTION_CODE'] %>/openurl?Force_direct=true&test_access=true&&portfolio_pid=" +
                        holding['portfolio_pid'] + "&rfr_id=info%3Asid%2Fprimo.exlibrisgroup.com&u.ignore_date_coverage=true"
                }

                if (url !== null) {
                    var text = holding['collection'] || "Electronic resource";
                    url = '<a href="' + url + '">' + text + '</a>';
                } else {
                    url = "Electronic Resource (no URL available)";
                }

                return [url, holding['coverage_statement'], holding['public_note']]
                    .filter(function (item) {
                        return item != null && item.length > 0;
                    }).join(" - ");
            }

        } else {
            return BlacklightAlma.prototype.formatHolding.call(this, mms_id, holding);
        }
    };

    Franklin.prototype.renderAvailability = function (element, html) {
      // if there's no availability text at all, then hide the field label altogether
      if(html && html.length > 0) {
          BlacklightAlma.prototype.renderAvailability.call(this, element, html);
      } else {
          $(element).closest(".document").find(".blacklight-availability").hide();
      }
    };

    Franklin.prototype.loadRequestOptionsAjax = function(mmsid) {
        var url = "/alma/single_availability.json?mms_id=" + encodeURIComponent(mmsid);

        $('#requestOptions-' + mmsid).on('error.dt', function(e, settings, techNote, message) {
            $(this).dataTable().fnSettings().oLanguage.sEmptyTable = 'An error has occurred.';
            $(this).DataTable().draw();
        })
        .DataTable({
            "ajax": function(data, callback, settings) {
                $.get(url, function(data) {
                    globaldata = $.extend({}, globaldata, data["metadata"]);
                    callback({"data": data["data"]});
                    Franklin.prototype.loadRequestOptionListAjax(mmsid);
                });
            },
            "processing": true,
            "columnDefs": [
                { "visible": false, "targets": [0,6,7] },
                { "orderable": false, "targets": 5 }
            ],
            "order": [],
            "language": {
              "search": "Filter records:",
              "loadingRecords": "&nbsp;",
              "processing": "Please wait - loading...",
              "emptyTable": "No item data available"
            },
            "drawCallback": function(settings) {
                var request_context = get_request_context(mmsid);
                var table = $('#requestOptions-' + mmsid).DataTable();
                var pageSize = table.settings()[0]['_iDisplayLength'];
                var tableLen = table.data().length;

                if(tableLen > 0 && globaldata != null) {
                    data = table.data();
                    for(var i = 0; i < tableLen; i++) {
                        if(data[i][7] in globaldata && renderdata[mmsid].indexOf(data[i][7]) == -1) {
                            var requests = globaldata[data[i][7]];
                            if(validRequestTypes.indexOf(requests[0]) != -1) {
                                renderdata[mmsid].push(data[i][7]);
                                // TODO: when libraries reopen: remove conditional, Pickup@Penn=>Request
                                data[i][5][0] = disable_pickup_at_penn(request_context) ? "" : "<a target='_blank' href='/alma/request?mms_id=" + mmsid + "&holding_id=" + data[i][6] + "&item_pid=" + data[i][7] + "'>Pickup@Penn1</a>";
                                table.row(i).invalidate().draw();
                            }
                        } 
                    }
                }

                if(tableLen <= 10) {
                  $('#requestOptions-' + mmsid + '_length').hide();
                }
                else {
                  $('#requestOptions-' + mmsid + '_length').show()
                }

                if(tableLen > pageSize) {
                  $('#requestOptions-' + mmsid + '_paginate').show()
                }
                else {
                  $('#requestOptions-' + mmsid + '_paginate').hide();
                }
            },
            "initComplete": function(settings, json) {
                var table = $('#requestOptions-' + mmsid).DataTable();

                if(globaldata[mmsid]['inventory_type'] == 'electronic') {
                    table.column(4).visible(false);
                    $(table.column(2).header()).text("");
                }

                var dataLen = json.data.length;
                if(dataLen == 0) {
                    //$('#table-wrapper-' + mmsid).hide();
                }
                // Reference: https://stackoverflow.com/a/15458987
                // Check if the location of the first holding is an HTML element,
                // indicating this is for a serial
                else if(/<[a-z][\s\S]*>/i.test(json.data[0][2])) {
                    $('#requestOptionsAvailability-' + mmsid).text('Holdings');
                }
                else {
                    $('#requestOptionsAvailability-' + mmsid).text('Availability');
                }

                $('.load-holding-details').each(function(idx, element) {
                    var mmsid = $(element).data("mmsid");
                    var holdingid = $(element).data("holdingid");
                    var url = "/alma/holding_details?mms_id="+mmsid+"&holding_id="+holdingid
                    $.ajax({
                        url: url,
                        success: function(data, textStatus, jqXHR) {
                            var holdingdetails = data['holding_details'];
                            var notes = data['notes'];

                            $(element).removeClass('load-holding-details');
                            $(element).html('');
                            $(element).append(holdingdetails);
                            $('#notes-' + holdingid).append(notes);
                        }
                    });
                });

                $('.load-portfolio-details').each(function(idx, element) {
                    var mmsid = $(element).data("mmsid");
                    var portfoliopid = $(element).data("portfoliopid");
                    var collectionid = $(element).data("collectionid");
                    var coverage = $(element).data("coverage");
                    var publicnote = $(element).data("publicnote");

                    var url = "/alma/portfolio_details?mms_id="+mmsid+"&portfolio_pid="+portfoliopid+"&collection_id="+collectionid+"&coverage="+coverage+"&public_note="+publicnote
                    $.ajax({
                        url: url,
                        success: function(data, textStatus, jqXHR) {
                            var portfoliodetails = data['portfolio_details'];
                            var notes = data['notes']
                            $(element).removeClass('load-portfolio-details');
                            $(element).html('');
                            $(element).append(portfoliodetails);
                            $('#notes-' + portfoliopid).append(notes);
                        }
                    });
                });
            }
        });
    };

    Franklin.prototype.loadRequestOptionListAjax = function(mmsid) {
        $.ajax({
            url: "/alma/request_options.json?mms_id="+mmsid,
            success: function(data, textStatus, jqXHR) {
                var optionList = $('#requestOptionList-' + mmsid);

                if(globaldata[mmsid]["facultyexpress"]) {
                    for(i = 0; i < data.length; i++) {
                        if(data[i]['option_name'] == 'Interlibrary Loan') {
                            data[i]['option_name'] = 'FacultyEXPRESS';
                            break;
                        }
                    }
                }

                // Remove once request option API is fixed
                if(globaldata[mmsid]["inventory_type"] == "electronic") {
                    for(i = 0; i < data.length; i++) {
                        if(data[i]['option_name'] == 'Books By Mail') {
                            data.splice(i,1);
                            break;
                        }
                    }
                }

                // Replace BD+ w/BD+ Request for demo purposes; correct when fully implemented
                if(globaldata[mmsid]["inventory_type"] == "physical") {
                    for(i = 0; i < data.length; i++) {
                        if(data[i]['option_name'] == 'BorrowDirect+') {
                            data[i]['option_name'] = 'BorrowDirect+ Request';
                            data[i]['option_url'] = '/new_request?id=FRANKLIN_' + mmsid;
                            break;
                        }
                    }
                }

                data.forEach(function(element) {
                    var containingdiv = $('<div class="request-option-wrapper"></div>');
                    var highlightable = element['highlightable'] ? ' highlightable' : ''
                    var button = $('<button>').attr({
                                     class: 'btn btn-basic btn-request-option' + highlightable,
                                     text: element['option_name'],
                                     onclick: "window.open('" + element["option_url"] + "', '_blank')"
                                 }).text(element['option_name']);
                   button.appendTo(containingdiv);
                   containingdiv.appendTo(optionList);
                });
                $('#request-options-spinner-' + mmsid).remove();
                console.log(data);
            }
        });   
    };

    Franklin.prototype.loadRequestOptions = function() {
        $(".request-options-load").each(function(index, element) {
            var mmsid = $(element).data("mmsid");
            if($(element).is(":visible")) {
                Franklin.prototype.loadRequestOptionsAjax(mmsid);
                Franklin.prototype.initializeItemsDataTable(mmsid);
            }
            else {
                $('.toggle[data-mmsid=' + mmsid + ']').each(function() {
                    $(this).one("click", function() {
                        Franklin.prototype.loadRequestOptionsAjax(mmsid);
                        Franklin.prototype.initializeItemsDataTable(mmsid);
                        $('#table-wrapper-' + mmsid).toggle();

                        $(this).click(function() {
                            $('#table-wrapper-' + mmsid).toggle();
                        });
                    });
                });
            }
        });
    };

    Franklin.prototype.initializeItemsDataTable = function(mmsid) {
        $('#holdingItems-' + mmsid).on('error.dt', function(e, settings, techNote, message) {
            $(this).dataTable().fnSettings().oLanguage.sEmptyTable = 'An error has occurred.';
            $(this).DataTable().draw();
        })
        .DataTable({
            "dom": '<"backbutton-top-'+ mmsid +'">lftipr<"backbutton-' + mmsid + '">',
            "processing": true,
            "columnDefs": [
                { "visible": false, "targets": [0,6,7] },
                { "orderable": false, "targets": 5 }
            ],
            "order": [],
            "language": {
                "search": "Filter records:",
                "loadingRecords": "&nbsp;",
                "processing": "Please wait - loading...",
                "emptyTable": "No item data available"
            },
            "drawCallback": function(settings) {
                var request_context = get_request_context(mmsid);
                var table = $('#holdingItems-' + mmsid).DataTable();
                var pageSize = table.settings()[0]['_iDisplayLength'];
                var tableLen = table.data().length;

                if(tableLen > 0) {
                    data = table.data();
                    for(var i = 0; i < tableLen; i++) {
                        if(data[i][0] in globaldata && renderdata[mmsid].indexOf(data[i][0]) == -1 && data[i][5].length == 0) {
                            var requests = globaldata[data[i][0]];
                            if(validRequestTypes.indexOf(requests[0]) != -1) {
                                renderdata[mmsid].push(data[i][0]);
                                // TODO: when libraries reopen: remove conditional, Pickup@Penn=>Request
                                data[i][5].push(disable_pickup_at_penn(request_context) ? "" : "<a target='_blank' href='/alma/request?mms_id=" + data[i][6] + "&holding_id=" + data[i][7] + "&item_pid=" + data[i][0] + "'>Pickup@Penn2</a>");
                                table.row(i).invalidate().draw();
                            }
                        } 
                    }
                }

                if(tableLen <= 10) {
                  $('#holdingItems-' + mmsid + '_length').hide();
                }
                else {
                  $('#holdingItems-' + mmsid + '_length').show()
                }

                if(tableLen > pageSize) {
                  $('#holdingItems-' + mmsid + '_paginate').show()
                }
                else {
                  $('#holdingItems-' + mmsid + '_paginate').hide();
                }
            },
            "initComplete": function(settings, json) {
                $('#holdingItems-' + mmsid).show();
                $('#holdingItems-' + mmsid + '_wrapper').hide();
            }
        });

        $('.backbutton-top-' + mmsid).html("<input type='button' value='< Back' onclick='swapDataTables(\"" + mmsid + "\")'></input>");
        $('.backbutton-' + mmsid).html("<br><br><input type='button' value='< Back' onclick='swapDataTables(\"" + mmsid + "\")'></input>");
    };

    Franklin.prototype.checkRequestable = function(mmsid) {
        var url = "/alma/check_requestable?mms_id=" + mmsid;
        $.ajax({
            url: url,
            success: function(data, textStatus, jqXHR) {
                globaldata = $.extend({}, globaldata, data);
                $('#requestOptions-' + mmsid).DataTable().draw();
            }
        });
    }

    var ba = new Franklin();
    ba.loadAvailability();
    ba.loadRequestOptions();
});

function loadItems(mms_id, holding_id, location_code) {
    renderdata[mms_id] = [];
    var holdingItemsTable = $('#holdingItems-' + mms_id).DataTable();
    holdingItemsTable.clear().draw();
    holdingItemsTable.ajax.url('/alma/holding_items.json?mms_id=' + mms_id + "&holding_id=" + holding_id + "&current_location=" + location_code).load();
    swapDataTables(mms_id);
}

function swapDataTables(mmsid) {
    $('#requestOptions-' + mmsid + '_wrapper').toggle();
    $('#holdingItems-' + mmsid + '_wrapper').toggle();
}
/*
$(function() {
    $('.toggle').each(function() {
        var mmsid = $(this).data('mmsid');
        $(this).click(function() {
            $('#table-wrapper-' + mmsid).toggle();
        });
    });
});
*/
